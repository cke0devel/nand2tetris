// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	And(a=true, b=instruction[15], out=Cinst);
	Not(in=Cinst, out=Ainst);

	And(a=Cinst, b=instruction[5], out=ALUtoA);
	Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=Mux16ToA);
	Or(a=Ainst, b=ALUtoA, out=loadA);
	ARegister(in=Mux16ToA, load=loadA, out=AReg);

	And(a=Cinst, b=instruction[4], out=loadD);
	DRegister(in=ALUout, load=loadD, out=DReg);

	Mux16(a=AReg, b=inM, sel=instruction[12], out=AMout);
	
	ALU(x=DReg, y=AMout, zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=ALUout, zr=ZR, ng=NG);

	Or(a=instruction[0], b=instruction[1], out=jump1);
	Or(a=instruction[2], b=jump1, out=jmp);

	Not(in=ZR, out=nonzero);
	Not(in=NG, out=nonng);
	And(a=nonzero, b=nonng, out=PO);
	And(a=instruction[1], b=ZR, out=load1);
	And(a=instruction[2], b=NG, out=load2);
	And(a=instruction[0], b=PO, out=load3);

	Or(a=load1, b=load2, out=load4);
	Or(a=load4, b=load3, out=load5);

	And(a=Cinst, b=load5, out=load6);
	And(a=jmp, b=load6, out=pcload);

	Or16(a=false, b=ALUout, out=outM);
	Or16(a=false, b=AReg, out[0..14]=addressM);
	PC(in=AReg, load=pcload, inc=true, reset=reset, out[0..14]=pc);
	And(a=Cinst, b=instruction[3], out=writeM);
}
